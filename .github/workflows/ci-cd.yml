name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Run tests
        run: |
          pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        run: |
          # Install required packages
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          
          # Add Dockerâ€™s official GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

          # Set up the stable repository
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Install Docker
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo systemctl start docker

      - name: Build Docker image
        run: |
          docker build -t trade-order-service .

      - name: Deploy to EC2
        run: |
          # Save the SSH private key to a file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > trade-order-service.pem
          chmod 400 trade-order-service.pem

          # Stop and remove the existing container (if any)
          ssh -o StrictHostKeyChecking=no -i trade-order-service.pem ubuntu@${{ secrets.EC2_IP }} "docker stop trade-order-service || true && docker rm trade-order-service || true"

          # Deploy the new container
          ssh -o StrictHostKeyChecking=no -i trade-order-service.pem ubuntu@${{ secrets.EC2_IP }} "docker run -d -p 80:80 --name trade-order-service trade-order-service"